# -*- coding: utf-8 -*-
"""Marketing_data_artificial_neural_network_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KdLlddXkgrYUPImlxixsTEwozifNtcwf

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_csv('Data HSS.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

print(X)
print(y)

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

print(X_train)
print(y_train)

"""##Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(y_train.reshape(-1,1))
print(y_test.reshape(-1,1))

sc1 = StandardScaler()
y_train = sc1.fit_transform(y_train.reshape(-1,1))

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units=1))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer = 'adam', loss = 'mean_squared_error')

"""### Training the ANN model on the Training set"""

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

"""### Predicting the results of the Test set"""

from sklearn.metrics import r2_score, mean_squared_error,mean_absolute_percentage_error
import math

y_pred = sc1.inverse_transform(ann.predict(X_test))
np.set_printoptions(precision=2)

maxY=max(y_test)
minY=min(y_test)
a=maxY-minY
print(a)

print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))
print ("The R-Squared value is: "+str(r2_score(y_test, y_pred)))
print ("The Mean Squared Error value is: "+str(mean_squared_error(y_test, y_pred)))
print ("The Root Mean Squared Error value is: "+str(math.sqrt(mean_squared_error(y_test, y_pred))))
print ("The Normalize Root Mean Squared Error value is: "+str(math.sqrt(mean_squared_error(y_test, y_pred))/(a)*100))
print ("The Mean Absolute Error value is: "+str(mean_absolute_percentage_error(y_test, y_pred)*100))